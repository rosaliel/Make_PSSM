How to install and use a local version of PROSS 
***********************************************

Section 1 - create a local version of PROSS at your directory
-------------------------------------------------------------
1. add the following modules to your .bashrc file
module load python/2.7.6
module load ncbi-blast+/2.2.29
module load cd-hit/4.6.1
module load muscle/3.8.425
module load csblast/2.2.3

2. copy the directory /home/labs/fleishman/adig/thermostab/PROSS_release/ to your directory

3. remove all .pyc files if exist (in the PROSS_release directory: rm -rf *.pyc)

4. make a new directory for storage of output results. When you run PROSS results will appaer there (see also 5)

5. In your copy of PROSS_release/ open the file: Pross_scripts/path_variables.py    then:
   a. In line 3 change the path in variable "gen_path" to <YOUR_PATH_TO_PROSS_RELEASE>/PROSS_release/Pross_scripts/ (generated in clause 2). 
   b. In line 4 change the path in variable "protocols_path" to <YOUR_PATH_TO_PROSS_RELEASE>/PROSS_release/Pross_Rosettascripts/
   c. In line 5 change the path in variable "flags_path" to <YOUR_PATH_TO_PROSS_RELEASE>/PROSS_release/Pross_flags/
   d. In line 6 change the path in variable "query_path" to the output path (generated in clause 4).

Now you have a PROSS version that is ready for use.

Section 2 - Rosetta scripts called by PROSS
-------------------------------------------
PROSS will be running xml scripts and flags files. 
PROSS runs a static version of Rosettta from ~April 2016.
PROSS uses a database version stored in /home/labs/fleishman/adig/thermostab/PROSS_release/Pross_Rosettadatabase

Rosetta scripts used by PROSS are stored in  /PROSS_release/Pross_Rosettascripts
Rosetta flags used by PROSS are in stored in /PROSS_release/Pross_flags

If you wish to use another branch of Rosetta you need to change several lines in /PROSS_release/Pross_scripts/ You can find these lines by greping "adig" and "Rosetta".
If you wish to use another database, you need to change the path in all files here: /PROSS_release/Pross_flags/

Section 3 - prepare the query details 
-------------------------------------
Prepare a query input file:
Here are all the arguments that should be in the file and their default value. In comma (#) what can be instead of default.
Note! the file must not contain emtpy line. This will cause an error
###############################################################################################################################################################################################
-pdbid=PDB_4_LETTER_CODE			#To upload your own PDB file provide instead the full path and see also the uploaded_fasta flag
-uploaded_fasta=				#If in pdbid you uploaded your own file, provide here the full path to a matching fasta file. Else leave empty. See comment * below 
-input_seq=					#If the structure is of a homolog provide the query sequence to thread.   
-chain_id=DESIGNED_CAHIN_ONE_LETTER_CODE		
-small_ligands=					#A comma separated list of ligand identifiers of metal atoms/small molecules around which you want to fix (threshold: <=8A)
-large_ligands=					#A comma separated list of DNA/RNA/Protein chain identifiers (1 letter) of interacting with the designed chain (threshold: <5A)
-res_to_fix=					#A comma separated list of residues that you want to fix for any reason
-symm_interfaces=				#For symmetric design on oligomers. See comment ** below   
-idealize=No					#Change to Yes in case you want to idealize the structure prior to refinement. Not recommended.
-input_msa=No					#If you wish to upload an MSA file change the "No" to the file's full path. Put the query sequence in line 1 and with the name:>THIS_IS_QUERY
-refined_file=No				#If you wish to upload a refined structure and skip refinement change the "No" to the full path to the refined structure.
-evalue=0.0001					#Any positive float number 
-min_id=30					#Any positive float number between 10-100
-max_targets=3000				#Any positive integer between 10-10000
-coverage=0.6					#Any positive float number between that is lower than 1. 
-cst_value=0.4					#Any positive float number for sfxn reweight with coordinate_constraints
###############################################################################################################################################################################################

*The FASTA sequence file and the upload MSA option (if used) must obey a strict format. If you don't read all the instructions carefully, an error is guaranteed.
For FASTA file see links: http://pross.weizmann.ac.il/help/Help/Matching%20FASTA%20file.html   and http://pross.weizmann.ac.il/help/Help/Structure.html
For MSA file see link: http://pross.weizmann.ac.il/help/Help/MSA.html

**Cyclic oligomers (e.g. C2, C3...): specify symmetry type + a comma + a whitespace +  one chain that is not the designed chain.
Example: symm_interfaces=C2, B 
(designed chain is A)
Dihedarl oligomers (e.g. D2, D3...): specify symmetry type + a comma + a whitespace + one chain from the cyclic symmetry + comma + one chain from the dihedral symmetry
Example: symm_interfaces=D3, B,D 
(assuming a D3 with A,B,C at the top, D,E,F at the bottom and A is the designed chain. D3, C,F could also work and other options)


Here is an example for a file:
######################################################################################################
-pdbid=1NDD                                                                                                                     
-uploaded_fasta=
-input_seq=
-chain_id=A
-small_ligands=
-large_ligands=
-res_to_fix=2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33
-symm_interfaces=
-idealize=No
-input_msa=/home/labs/fleishman/adig/thermostab/nedd8/exclude_idToUbiq_85_nogaps/nedd8_query_msa.aln
-refined_file=No
-min_id=34                                              
-max_targets=5000                                       
-coverage=0.6          
-cst_value=0.4                                 
#####################################################################################################

Plenty of other examples for input files can be found in /home/labs/fleishman/adig/thremostab/PROSS_release/Pross_unit_tests/

Section 4 - command line 
------------------------
2 options: 
a. see output notes on terminal. The terminal will be busy for about 3-5 hours. 
b. run it with nohup and print all notes to an outfile. 

command line option a: PROSS_release/Pross_scripts/main.py @<FULL_PATH_TO_INPUT_FILE>
command line option b: nohup python PROSS_release/Pross_scripts/main.py @<FULL_PATH_TO_INPUT_FILE> ><OUTPUT_FILE_NAME> &

command line example a: python PROSS_release/Pross_scripts/main.py @PROSS_release/Pross_unit_tests/1ndd_flags_a
command line example b: nohup python PROSS_release/Pross_scripts/main.py @PROSS_release/Pross_unit_tests/1ndd_flags_a >out_1ndd_a &

Section 5 - view results
------------------------
The results folder will show up in the new directory you made in section 1 - 5d. The directory name will be PDBCODE_ (or uploaded_pdb_ if you used your own pdb file). 
If PDBCODE_ already exists the results directory will be PDBCODE__ and so on.
In the results directory the following directories will appear: msa/ in/ refinement/ idealize/(optional) filterscan/ design/ 
1. The final results are in /design/designable.........../pdbs
2. The input msa is /msa/query_msa.fa
3. The PSSM that will be used by Rosetta is /in/final_pssm_for_Rosetta
4. The sub MSA and sub PSSM files are inside /in/sub_MSAs/  and inside in/sub_MSAs/sub_PSSMs
5. The refined structure is /refinement/pdbs/PDBCODE_CHAINID_refined.pdb 

For some useful commands that help in analysis of the various mutations, see PROSS evernote notebook that I shared with the lab (not shared yet 11.7.16)
